{"version":3,"sources":["webpack:///../src/Panel/readme.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,qMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,SADR,SAGA,sBACE,kBAAIC,WAAW,MACb,iBAAGA,WAAW,MAAd,0BAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,yEACA,mBAAKA,WAAW,MAAK,sBAAMA,WAAW,OAAU,IAA3B,mFAOvB,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,mDACA,iBAAGA,WAAW,MAAd,oJAKJ,iBAAQ,CACN,GAAM,eADR,eAGA,sBACE,kBAAIA,WAAW,MAAf,6BAAkD,0BAAYA,WAAW,MAAvB,uBAClD,kBAAIA,WAAW,MAAf,uBAA4C,0BAAYA,WAAW,MAAvB,4BAC5C,kBAAIA,WAAW,MAAf,2CACA,kBAAIA,WAAW,MAAf,SAA8B,kBAAIA,WAAW,MACzC,kBAAIA,WAAW,MAAf,WAAgC,kBAAIA,WAAW,MAC3C,kBAAIA,WAAW,MAAf,SACA,kBAAIA,WAAW,MAAf,+CAEJ,kBAAIA,WAAW,MAAf,WAAgC,kBAAIA,WAAW,MAC3C,kBAAIA,WAAW,MAAf,gBAIV,iBAAQ,CACN,GAAM,gBADR,gBAGA,+BACA,iBAAQ,CACN,GAAM,eADR,eAGA,sBACE,kBAAIA,WAAW,MAAf,6BAAkD,0BAAYA,WAAW,MAAvB,wBAClD,kBAAIA,WAAW,MAAf,4CACA,kBAAIA,WAAW,MAAf,SAA8B,kBAAIA,WAAW,MACzC,kBAAIA,WAAW,MAAf,eACA,kBAAIA,WAAW,MAAf,uD,mMAOVJ,EAAWK,gBAAiB","file":"component---src-panel-readme-md-916ffaa8049fa0458ee1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/app/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"panel\"\n    }}>{`Panel`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`It uses the AppLayout`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`It expects 3 direct children (PanelHeader, PanelContent, PanelFooter)`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`<Panel>\n  <PanelHeader />\n  <PanelContent />\n  <PanelFooter />\n</Panel>\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Panel will pass a onClose prop to it's children`}</p>\n        <p parentName=\"li\">{`but allow final user overwrite, this is nice if\nyou want a different behaviour for the button\nthat is automatically added to the PanelFooter`}</p>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"panelheader\"\n    }}>{`PanelHeader`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`has a background color of `}<inlineCode parentName=\"li\">{`theme.primary.main`}</inlineCode></li>\n      <li parentName=\"ul\">{`has a font color of `}<inlineCode parentName=\"li\">{`theme.primary.pureWhite`}</inlineCode></li>\n      <li parentName=\"ul\">{`display a close icon in the upper right`}</li>\n      <li parentName=\"ul\">{`props:`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`required`}<ul parentName=\"li\">\n              <li parentName=\"ul\">{`title`}</li>\n              <li parentName=\"ul\">{`hasClose (should default to true => TODO)`}</li>\n            </ul></li>\n          <li parentName=\"ul\">{`optional`}<ul parentName=\"li\">\n              <li parentName=\"ul\">{`onClose`}</li>\n            </ul></li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"panelcontent\"\n    }}>{`PanelContent`}</h3>\n    <p>{`props:`}</p>\n    <h3 {...{\n      \"id\": \"panelfooter\"\n    }}>{`PanelFooter`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`has a background color of `}<inlineCode parentName=\"li\">{`theme.primary.white`}</inlineCode></li>\n      <li parentName=\"ul\">{`display a button icon in the upper right`}</li>\n      <li parentName=\"ul\">{`props:`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`cancelLabel`}</li>\n          <li parentName=\"ul\">{`hasCancel (should default to true => TODO)`}</li>\n        </ul></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}